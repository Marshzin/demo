import React, { useState, useEffect } from "react"; import * as XLSX from "xlsx"; import Barcode from "react-barcode"; import "./styles.css"; const logins = [ { usuario: "NovoShopping", loja: "NovoShopping", senha: "1234", isAdmin: false }, { usuario: "RibeiraoShopping", loja: "RibeiraoShopping", senha: "1234", isAdmin: false }, { usuario: "Iguatemi", loja: "Iguatemi", senha: "1234", isAdmin: false }, { usuario: "DomPedro", loja: "DomPedro", senha: "1234", isAdmin: false }, { usuario: "Administrador", loja: "Administrador", senha: "demo1234", isAdmin: true }, ]; const lojas = ["NovoShopping", "RibeiraoShopping", "Iguatemi", "DomPedro"]; const logoUrl = "/logo.jpeg"; export default function App() { const [logado, setLogado] = useState(false); const [isAdmin, setIsAdmin] = useState(false); const [usuarioAtual, setUsuarioAtual] = useState(null); useEffect(() => { const storedLogin = localStorage.getItem("logado"); const storedIsAdmin = localStorage.getItem("isAdmin") === "true"; const storedUsuario = localStorage.getItem("usuarioAtual"); if (storedLogin) setLogado(true); if (storedIsAdmin) setIsAdmin(true); if (storedUsuario) setUsuarioAtual(storedUsuario); }, []); function handleLogin(usuario, senha) { const usuarioEncontrado = logins.find((u) => u.usuario === usuario); if (usuarioEncontrado && senha === usuarioEncontrado.senha) { localStorage.setItem("logado", true); localStorage.setItem("isAdmin", usuarioEncontrado.isAdmin); localStorage.setItem("usuarioAtual", usuarioEncontrado.usuario); setLogado(true); setIsAdmin(usuarioEncontrado.isAdmin); setUsuarioAtual(usuarioEncontrado.usuario); } else { alert("Usuário ou senha inválidos."); } } function handleLogout() { localStorage.removeItem("logado"); localStorage.removeItem("isAdmin"); localStorage.removeItem("usuarioAtual"); setLogado(false); setIsAdmin(false); setUsuarioAtual(null); } return logado ? ( <MainApp onLogout={handleLogout} isAdmin={isAdmin} usuarioAtual={usuarioAtual} /> ) : ( <Login onLogin={handleLogin} /> ); } function Login({ onLogin }) { const [usuario, setUsuario] = useState("NovoShopping"); const [senha, setSenha] = useState(""); const handleLogin = () => { onLogin(usuario, senha); }; return ( <div style={styles.login}> <img src={logoUrl} alt="Logo" style={styles.logoLogin} /> <h1 style={{ marginBottom: 30, color: "#222" }}>Bem-vindo(a)!</h1> <div style={styles.inputContainer}> <select value={usuario} onChange={(e) => setUsuario(e.target.value)} style={styles.input} > {logins.map((u) => ( <option key={u.usuario} value={u.usuario}> {u.usuario} </option> ))} </select> <input type="password" placeholder="Senha" value={senha} onChange={(e) => setSenha(e.target.value)} style={styles.input} /> </div> <button onClick={handleLogin} style={styles.loginButton}> Entrar </button> </div> ); } function MainApp({ onLogout, isAdmin, usuarioAtual }) { const [abaAtiva, setAbaAtiva] = useState("itens"); const [itens, setItens] = useState([]); const [transferencias, setTransferencias] = useState(() => { const dados = localStorage.getItem("transferencias"); return dados ? JSON.parse(dados) : {}; }); const [codigoDigitado, setCodigoDigitado] = useState(""); const [itensEncontrados, setItensEncontrados] = useState([]); const [itemSelecionado, setItemSelecionado] = useState(null); const [lojaDestino, setLojaDestino] = useState(lojas[0]); // Carregar itens do XLS useEffect(() => { fetch("/itens.xls") .then((res) => res.arrayBuffer()) .then((data) => { const workbook = XLSX.read(data, { type: "array" }); const sheet = workbook.Sheets[workbook.SheetNames[0]]; const dados = XLSX.utils.sheet_to_json(sheet, { defval: "" }); const lista = dados.map((linha, i) => { const codigoProduto = String(linha["Código Produto"] || "").trim(); const codigosBarras = (String(linha["Códigos de Barras"] || "")) .split("|") .map((c) => c.trim()) .filter((c) => c.length > 0); const codigoBarra = codigosBarras.length > 0 ? codigosBarras[codigosBarras.length - 1] : codigoProduto; const descricao = String(linha["Descrição Completa"] || "Sem descrição").trim(); const referencia = String(linha["Referência"] || "-").trim(); return { id: ${codigoProduto}-${i}, codigo: codigoProduto, codigoBarra, nome: descricao, referencia, quantidade: 0, tamanho: "-" }; }); setItens(lista); }) .catch(() => alert("Erro ao carregar itens.xls")); }, []); // Salvar transferências no localStorage por loja useEffect(() => { localStorage.setItem("transferencias", JSON.stringify(transferencias)); }, [transferencias]); const handleInputChange = (e) => { const valor = e.target.value; setCodigoDigitado(valor); if (valor.trim().length >= 5) { const busca = valor.trim().toLowerCase(); const encontrados = itens.filter( (i) => i.codigo.toLowerCase() === busca || i.codigoBarra.toLowerCase() === busca || i.referencia.toLowerCase() === busca ); if (encontrados.length === 1) { setItemSelecionado(encontrados[0]); setTimeout(() => transferirItemAuto(encontrados[0]), 150); setCodigoDigitado(""); } else if (encontrados.length > 1) { setItensEncontrados(encontrados); setItemSelecionado(null); } } }; const transferirItemAuto = (item) => { if (!item) return; const novaTransferencia = { id: Date.now().toString() + "-" + Math.random(), itemId: item.id, codigo: item.codigo, codigoBarra: item.codigoBarra, nomeItem: item.nome, referencia: item.referencia, lojaDestino, data: new Date().toISOString(), }; setTransferencias((old) => { const copia = { ...old }; if (!copia[usuarioAtual]) copia[usuarioAtual] = []; copia[usuarioAtual] = [novaTransferencia, ...copia[usuarioAtual]]; return copia; }); setItemSelecionado(null); setItensEncontrados([]); setCodigoDigitado(""); alert("Transferência Realizada automaticamente!"); }; const buscarCodigo = () => { if (!codigoDigitado.trim()) return alert("Digite o código, referência ou código de barras."); const busca = codigoDigitado.trim().toLowerCase(); const encontrados = itens.filter( (i) => i.codigo.toLowerCase() === busca || i.codigoBarra.toLowerCase() === busca || i.referencia.toLowerCase() === busca ); if (encontrados.length === 0) { alert("Nenhum item encontrado."); setItensEncontrados([]); setItemSelecionado(null); return; } setItensEncontrados(encontrados); if (encontrados.length === 1) setItemSelecionado(encontrados[0]); setCodigoDigitado(""); }; const transferirItem = () => { if (!itemSelecionado) return alert("Selecione um item para transferir."); const novaTransferencia = { id: Date.now().toString() + "-" + Math.random(), itemId: itemSelecionado.id, codigo: itemSelecionado.codigo, codigoBarra: itemSelecionado.codigoBarra, nomeItem: itemSelecionado.nome, referencia: itemSelecionado.referencia, lojaDestino, data: new Date().toISOString(), }; setTransferencias((old) => { const copia = { ...old }; if (!copia[usuarioAtual]) copia[usuarioAtual] = []; copia[usuarioAtual] = [novaTransferencia, ...(copia[usuarioAtual] || [])]; return copia; }); alert("Transferência Realizada!!"); setItemSelecionado(null); setCodigoDigitado(""); setItensEncontrados([]); }; const excluirTransferencias = (loja) => { if ( window.confirm(Tem certeza que deseja excluir todas as transferências da loja ${loja}?) ) { setTransferencias((old) => ({ ...old, [loja]: [] })); alert(Transferências da loja ${loja} foram excluídas.); } }; const historicoFiltrado = transferencias[usuarioAtual] || []; const formatarData = (iso) => new Date(iso).toLocaleString("pt-BR", { day: "2-digit", month: "2-digit", year: "numeric", hour: "2-digit", minute: "2-digit", }); return ( <div style={styles.container}> <header style={styles.header}> <img src={logoUrl} alt="Logo" style={styles.logo} /> <h1 style={styles.title}>Democrata - Transferência ({usuarioAtual})</h1> <button onClick={onLogout} style={styles.logoutButton}>Sair</button> </header> <nav style={styles.tabs}> <button style={abaAtiva === "itens" ? styles.tabActive : styles.tab} onClick={() => setAbaAtiva("itens")} >Itens cadastrados</button> <button style={abaAtiva === "transferidos" ? styles.tabActive : styles.tab} onClick={() => setAbaAtiva("transferidos")} >Itens transferidos</button> {isAdmin && ( <button style={abaAtiva === "admin" ? styles.tabActive : styles.tab} onClick={() => setAbaAtiva("admin")} >Administração</button> )} </nav> <main style={styles.section}> {abaAtiva === "itens" && ( <> <h2>Buscar e Transferir Item</h2> <div style={styles.buscaContainer}> <input type="text" placeholder="Código, Referência ou Código de Barras" value={codigoDigitado} onChange={handleInputChange} style={{ ...styles.input, width: 340 }} autoFocus /> </div> <div style={{ display: "flex", alignItems: "center", gap: 16, marginBottom: 20 }}> <label style={{ fontWeight: 600 }}>Loja destino:</label> <select value={lojaDestino} onChange={e => setLojaDestino(e.target.value)} style={styles.select}> {lojas.map((l) => <option key={l} value={l}>{l}</option>)} </select> <button style={styles.button} onClick={() => { if (itemSelecionado) transferirItem(); else if (codigoDigitado.trim()) { buscarCodigo(); setTimeout(() => { if (itensEncontrados.length === 1) { setItemSelecionado(itensEncontrados[0]); setTimeout(transferirItem, 100); } else alert("Selecione o item após buscar."); }, 100); } else alert("Selecione um item ou digite o código."); }}>Transferir</button> </div> {itensEncontrados.length > 0 && ( <div style={styles.cardContainer}> <h3>Itens encontrados:</h3> <div style={styles.itensList}> {itensEncontrados.map((item) => ( <div key={item.id} onClick={() => setItemSelecionado(item)} style={{ ...styles.card, border: item.id === itemSelecionado?.id ? "2px solid #4a90e2" : "2px solid transparent", }} > <div style={{ flex: 2 }}> <h4>{item.nome}</h4> <p><strong>Referência:</strong> {item.referencia}</p> </div> <div style={{ minWidth: 150, textAlign: "center" }}> <Barcode value={item.codigoBarra} height={40} width={1.5} /> <div style={styles.lojaTagSmall}>{lojaDestino}</div> </div> </div> ))} </div> </div> )} </> )} {abaAtiva === "transferidos" && ( <> <h2>Histórico de Transferências</h2> {historicoFiltrado.length === 0 ? <p>Nenhuma transferência realizada.</p> : <div style={styles.gridTransfer}> {historicoFiltrado.map(tr => ( <div key={tr.id} style={styles.cardTransfer}> <h4>{tr.nomeItem}</h4> <p><strong>Cód. Barras:</strong> {tr.codigoBarra}</p> <p><strong>Referência:</strong> {tr.referencia}</p> <p><strong>Destino:</strong> {tr.lojaDestino}</p> <p style={{ fontSize: 12, color: "#888" }}>Em {formatarData(tr.data)}</p> <Barcode value={tr.codigoBarra} height={40} width={1.5} /> </div> ))} </div> } </> )} {abaAtiva === "admin" && isAdmin && ( <> <h2>Administração</h2> <p>Excluir histórico de cada loja:</p> {lojas.map(loja => ( <button key={loja} style={{ ...styles.button, background: "#c0392b", margin: "6px 0" }} onClick={() => excluirTransferencias(loja)}> Excluir transferências de {loja} </button> ))} </> )} </main> </div> ); } const styles = { login: { height: "100vh", background: "#f7f7f7", display: "flex", flexDirection: "column", alignItems: "center", justifyContent: "center" }, logoLogin: { width: 220, marginBottom: 25 }, inputContainer: { display: "flex", flexDirection: "column", gap: 15, marginBottom: 20 }, input: { padding: 14, borderRadius: 12, border: "1.5px solid #ccc", fontSize: 18, fontWeight: 500, outline: "none" }, loginButton: { padding: "16px 40px", fontSize: 22, background: "#4a90e2", color: "#fff", border: "none", borderRadius: 10, cursor: "pointer" }, container: { fontFamily: "Arial, sans-serif", background: "#fff", minHeight: "100vh", maxWidth: 960, margin: "0 auto", padding: "10px 30px 30px 30px" }, header: { background: "#222", color: "#fff", padding: "18px 30px", display: "flex", alignItems: "center", gap: 20, borderRadius: 10, marginBottom: 30 }, logo: { width: 90 }, title: { fontSize: 24, fontWeight: 700, flexGrow: 1 }, logoutButton: { backgroundColor: "#e03e2f", color: "#fff", border: "none", borderRadius: 8, padding: "10px 22px", fontSize: 15, cursor: "pointer" }, tabs: { display: "flex", gap: 24, marginBottom: 30 }, tab: { padding: "12px 32px", backgroundColor: "transparent", border: "none", fontWeight: 600, fontSize: 16, color: "#666", cursor: "pointer" }, tabActive: { padding: "12px 32px", backgroundColor: "transparent", border: "none", borderBottom: "3px solid #4a90e2", fontWeight: 700, fontSize: 16, color: "#222", cursor: "default" }, section: { background: "#fafafa", borderRadius: 12, padding: 20 }, buscaContainer: { display: "flex", gap: 14, marginBottom: 25 }, button: { backgroundColor: "#4a90e2", border: "none", borderRadius: 12, color: "#fff", fontWeight: 600, fontSize: 16, padding: "14px 22px", cursor: "pointer" }, cardContainer: { maxHeight: 360, overflowY: "auto", marginBottom: 20 }, itensList: { display: "flex", flexDirection: "column", gap: 14 }, card: { display: "flex", justifyContent: "space-between", alignItems: "center", padding: 16, borderRadius: 10, background: "#fff", cursor: "pointer", boxShadow: "0 2px 6px rgba(0,0,0,0.1)" }, select: { padding: 10, borderRadius: 8, fontSize: 16, border: "1px solid #ccc" }, gridTransfer: { display: "grid", gridTemplateColumns: "repeat(auto-fill,minmax(230px,1fr))", gap: 18 }, cardTransfer: { padding: 12, borderRadius: 10, background: "#fff", boxShadow: "0 2px 6px rgba(0,0,0,0.1)", display: "flex", flexDirection: "column", gap: 6 }, lojaTagSmall: { fontSize: 12, color: "#fff", background: "#4a90e2", borderRadius: 6, padding: "2px 6px", marginTop: 4, display: "inline-block" } };
