import React, { useState, useEffect } from "react";
import * as XLSX from "xlsx";
import Barcode from "react-barcode";
import "./styles.css";

const logins = [
  { usuario: "NovoShopping", loja: "NovoShopping", senha: "1234", isAdmin: false },
  { usuario: "RibeiraoShopping", loja: "RibeiraoShopping", senha: "1234", isAdmin: false },
  { usuario: "Iguatemi", loja: "Iguatemi", senha: "1234", isAdmin: false },
  { usuario: "DomPedro", loja: "DomPedro", senha: "1234", isAdmin: false },
  { usuario: "Administrador", loja: "Administrador", senha: "demo1234", isAdmin: true },
];

const lojas = ["NovoShopping", "RibeiraoShopping", "Iguatemi", "DomPedro"];
const logoUrl = "/logo.jpeg";

export default function App() {
  const [logado, setLogado] = useState(false);
  const [isAdmin, setIsAdmin] = useState(false);
  const [usuarioAtual, setUsuarioAtual] = useState(null);

  useEffect(() => {
    const storedLogin = localStorage.getItem("logado");
    const storedIsAdmin = localStorage.getItem("isAdmin") === "true";
    const storedUsuario = localStorage.getItem("usuarioAtual");
    if (storedLogin) setLogado(true);
    if (storedIsAdmin) setIsAdmin(true);
    if (storedUsuario) setUsuarioAtual(storedUsuario);
  }, []);

  function handleLogin(usuario, senha) {
    const usuarioEncontrado = logins.find((u) => u.usuario === usuario);
    if (usuarioEncontrado && senha === usuarioEncontrado.senha) {
      localStorage.setItem("logado", true);
      localStorage.setItem("isAdmin", usuarioEncontrado.isAdmin);
      localStorage.setItem("usuarioAtual", usuarioEncontrado.usuario);
      setLogado(true);
      setIsAdmin(usuarioEncontrado.isAdmin);
      setUsuarioAtual(usuarioEncontrado.usuario);
    } else {
      alert("Usuário ou senha inválidos.");
    }
  }

  function handleLogout() {
    localStorage.removeItem("logado");
    localStorage.removeItem("isAdmin");
    localStorage.removeItem("usuarioAtual");
    setLogado(false);
    setIsAdmin(false);
    setUsuarioAtual(null);
  }

  return logado ? (
    <MainApp
      onLogout={handleLogout}
      isAdmin={isAdmin}
      usuarioAtual={usuarioAtual}
    />
  ) : (
    <Login onLogin={handleLogin} />
  );
}

function Login({ onLogin }) {
  const [usuario, setUsuario] = useState("NovoShopping");
  const [senha, setSenha] = useState("");

  const handleLogin = () => {
    onLogin(usuario, senha);
  };

  return (
    <div style={styles.login}>
      <img src={logoUrl} alt="Logo" style={styles.logoLogin} />
      <h1 style={{ marginBottom: 30, color: "#222" }}>Bem-vindo(a)!</h1>

      <div style={styles.inputContainer}>
        {/* Agora o usuário é selecionado em um SELECT */}
        <select
          value={usuario}
          onChange={(e) => setUsuario(e.target.value)}
          style={styles.input}
        >
          {logins.map((u) => (
            <option key={u.usuario} value={u.usuario}>
              {u.usuario}
            </option>
          ))}
        </select>

        <input
          type="password"
          placeholder="Senha"
          value={senha}
          onChange={(e) => setSenha(e.target.value)}
          style={styles.input}
        />
      </div>

      <button onClick={handleLogin} style={styles.loginButton}>
        Entrar
      </button>
    </div>
  );
}

function MainApp({ onLogout, isAdmin, usuarioAtual }) {
  const [abaAtiva, setAbaAtiva] = useState("transferidos");
  const [transferencias, setTransferencias] = useState(() => {
    const dados = localStorage.getItem("transferencias");
    return dados ? JSON.parse(dados) : {};
  });

  // Salva no localStorage separando por loja
  useEffect(() => {
    localStorage.setItem("transferencias", JSON.stringify(transferencias));
  }, [transferencias]);

  const excluirTransferencias = (loja) => {
    if (
      window.confirm(`Tem certeza que deseja excluir todas as transferências da loja ${loja}?`)
    ) {
      setTransferencias((old) => {
        const novo = { ...old, [loja]: [] };
        return novo;
      });
      alert(`Transferências da loja ${loja} foram excluídas.`);
    }
  };

  const historicoFiltrado = transferencias[usuarioAtual] || [];

  return (
    <div style={styles.container}>
      <header style={styles.header}>
        <img src={logoUrl} alt="Logo" style={styles.logo} />
        <h1 style={styles.title}>
          Democrata - Transferência ({usuarioAtual})
        </h1>
        <button onClick={onLogout} style={styles.logoutButton}>
          Sair
        </button>
      </header>

      <nav style={styles.tabs}>
        <button
          style={abaAtiva === "transferidos" ? styles.tabActive : styles.tab}
          onClick={() => setAbaAtiva("transferidos")}
        >
          Itens transferidos
        </button>

        {isAdmin && (
          <button
            style={abaAtiva === "admin" ? styles.tabActive : styles.tab}
            onClick={() => setAbaAtiva("admin")}
          >
            Administração
          </button>
        )}
      </nav>

      <main style={styles.section}>
        {abaAtiva === "transferidos" && (
          <>
            <h2>Histórico de Transferências - {usuarioAtual}</h2>
            {historicoFiltrado.length === 0 ? (
              <p>Nenhuma transferência realizada.</p>
            ) : (
              <ul>
                {historicoFiltrado.map((tr) => (
                  <li key={tr.id}>
                    {tr.nomeItem} - {tr.referencia}
                  </li>
                ))}
              </ul>
            )}
          </>
        )}

        {abaAtiva === "admin" && isAdmin && (
          <>
            <h2>Administração</h2>
            <p>Excluir histórico de cada loja:</p>
            {lojas.map((loja) => (
              <button
                key={loja}
                onClick={() => excluirTransferencias(loja)}
                style={{
                  ...styles.button,
                  background: "#c0392b",
                  margin: "6px 0",
                }}
              >
                Excluir transferências de {loja}
              </button>
            ))}
          </>
        )}
      </main>
    </div>
  );
}

const styles = {
  login: {
    height: "100vh",
    background: "#f7f7f7",
    display: "flex",
    flexDirection: "column",
    alignItems: "center",
    justifyContent: "center",
  },
  logoLogin: { width: 220, marginBottom: 25 },
  inputContainer: {
    display: "flex",
    flexDirection: "column",
    gap: 15,
    marginBottom: 20,
  },
  input: {
    padding: 14,
    borderRadius: 12,
    border: "1.5px solid #ccc",
    fontSize: 18,
    fontWeight: "500",
    outline: "none",
  },
  loginButton: {
    padding: "16px 40px",
    fontSize: 22,
    background: "#4a90e2",
    color: "#fff",
    border: "none",
    borderRadius: 10,
    cursor: "pointer",
  },
  container: {
    fontFamily: "Arial, sans-serif",
    background: "#fff",
    minHeight: "100vh",
    maxWidth: 960,
    margin: "0 auto",
    padding: "10px 30px 30px 30px",
  },
  header: {
    background: "#222",
    color: "#fff",
    padding: "18px 30px",
    display: "flex",
    alignItems: "center",
    gap: 20,
    borderRadius: 10,
    marginBottom: 30,
  },
  logo: { width: 90 },
  title: { fontSize: 24, fontWeight: "700", flexGrow: 1 },
  logoutButton: {
    backgroundColor: "#e03e2f",
    color: "#fff",
    border: "none",
    borderRadius: 8,
    padding: "10px 22px",
    fontSize: 15,
    cursor: "pointer",
  },
  tabs: { display: "flex", gap: 24, marginBottom: 30 },
  tab: {
    padding: "12px 32px",
    backgroundColor: "transparent",
    border: "none",
    fontWeight: "600",
    fontSize: 16,
    color: "#666",
    cursor: "pointer",
  },
  tabActive: {
    padding: "12px 32px",
    backgroundColor: "transparent",
    border: "none",
    borderBottom: "3px solid #4a90e2",
    fontWeight: "700",
    fontSize: 16,
    color: "#222",
    cursor: "default",
  },
  section: { background: "#fafafa", borderRadius: 12, padding: 20 },
  button: {
    backgroundColor: "#4a90e2",
    border: "none",
    borderRadius: 12,
    color: "#fff",
    fontWeight: "600",
    fontSize: 16,
    padding: "14px 22px",
    cursor: "pointer",
  },
};
